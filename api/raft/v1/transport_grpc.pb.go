// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: api/raft/v1/transport.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftTransportClient is the client API for RaftTransport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftTransportClient interface {
	// SendMessage sends a Raft message between nodes
	SendMessage(ctx context.Context, in *RaftMessage, opts ...grpc.CallOption) (*RaftMessageResponse, error)
	// SendSnapshot sends a Raft snapshot between nodes
	SendSnapshot(ctx context.Context, opts ...grpc.CallOption) (RaftTransport_SendSnapshotClient, error)
	// Heartbeat provides a way to check node connectivity
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type raftTransportClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftTransportClient(cc grpc.ClientConnInterface) RaftTransportClient {
	return &raftTransportClient{cc}
}

func (c *raftTransportClient) SendMessage(ctx context.Context, in *RaftMessage, opts ...grpc.CallOption) (*RaftMessageResponse, error) {
	out := new(RaftMessageResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.RaftTransport/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftTransportClient) SendSnapshot(ctx context.Context, opts ...grpc.CallOption) (RaftTransport_SendSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &RaftTransport_ServiceDesc.Streams[0], "/raft.v1.RaftTransport/SendSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftTransportSendSnapshotClient{stream}
	return x, nil
}

type RaftTransport_SendSnapshotClient interface {
	Send(*SnapshotChunk) error
	CloseAndRecv() (*SnapshotResponse, error)
	grpc.ClientStream
}

type raftTransportSendSnapshotClient struct {
	grpc.ClientStream
}

func (x *raftTransportSendSnapshotClient) Send(m *SnapshotChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftTransportSendSnapshotClient) CloseAndRecv() (*SnapshotResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftTransportClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/raft.v1.RaftTransport/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftTransportServer is the server API for RaftTransport service.
// All implementations must embed UnimplementedRaftTransportServer
// for forward compatibility
type RaftTransportServer interface {
	// SendMessage sends a Raft message between nodes
	SendMessage(context.Context, *RaftMessage) (*RaftMessageResponse, error)
	// SendSnapshot sends a Raft snapshot between nodes
	SendSnapshot(RaftTransport_SendSnapshotServer) error
	// Heartbeat provides a way to check node connectivity
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	mustEmbedUnimplementedRaftTransportServer()
}

// UnimplementedRaftTransportServer must be embedded to have forward compatible implementations.
type UnimplementedRaftTransportServer struct {
}

func (UnimplementedRaftTransportServer) SendMessage(context.Context, *RaftMessage) (*RaftMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedRaftTransportServer) SendSnapshot(RaftTransport_SendSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method SendSnapshot not implemented")
}
func (UnimplementedRaftTransportServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedRaftTransportServer) mustEmbedUnimplementedRaftTransportServer() {}

// UnsafeRaftTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftTransportServer will
// result in compilation errors.
type UnsafeRaftTransportServer interface {
	mustEmbedUnimplementedRaftTransportServer()
}

func RegisterRaftTransportServer(s grpc.ServiceRegistrar, srv RaftTransportServer) {
	s.RegisterService(&RaftTransport_ServiceDesc, srv)
}

func _RaftTransport_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftTransportServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.RaftTransport/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftTransportServer).SendMessage(ctx, req.(*RaftMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftTransport_SendSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftTransportServer).SendSnapshot(&raftTransportSendSnapshotServer{stream})
}

type RaftTransport_SendSnapshotServer interface {
	SendAndClose(*SnapshotResponse) error
	Recv() (*SnapshotChunk, error)
	grpc.ServerStream
}

type raftTransportSendSnapshotServer struct {
	grpc.ServerStream
}

func (x *raftTransportSendSnapshotServer) SendAndClose(m *SnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftTransportSendSnapshotServer) Recv() (*SnapshotChunk, error) {
	m := new(SnapshotChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RaftTransport_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftTransportServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.v1.RaftTransport/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftTransportServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftTransport_ServiceDesc is the grpc.ServiceDesc for RaftTransport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftTransport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raft.v1.RaftTransport",
	HandlerType: (*RaftTransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _RaftTransport_SendMessage_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _RaftTransport_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendSnapshot",
			Handler:       _RaftTransport_SendSnapshot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/raft/v1/transport.proto",
}
