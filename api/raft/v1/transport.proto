syntax = "proto3";

package raft.v1;

option go_package = "github.com/samintheshell/rangekey/api/raft/v1";

// RaftTransport service handles inter-node Raft communication
service RaftTransport {
    // SendMessage sends a Raft message between nodes
    rpc SendMessage(RaftMessage) returns (RaftMessageResponse);

    // SendSnapshot sends a Raft snapshot between nodes
    rpc SendSnapshot(stream SnapshotChunk) returns (SnapshotResponse);

    // Heartbeat provides a way to check node connectivity
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

// RaftMessage wraps the etcd Raft message for transport
message RaftMessage {
    // The serialized raftpb.Message
    bytes message_data = 1;

    // Source node ID
    uint64 from = 2;

    // Destination node ID
    uint64 to = 3;

    // Message timestamp
    int64 timestamp = 4;
}

// RaftMessageResponse confirms message delivery
message RaftMessageResponse {
    bool success = 1;
    string error = 2;
}

// SnapshotChunk represents a chunk of snapshot data
message SnapshotChunk {
    // Snapshot metadata
    SnapshotMetadata metadata = 1;

    // Chunk data
    bytes data = 2;

    // Chunk index
    uint32 chunk_index = 3;

    // Total chunks
    uint32 total_chunks = 4;

    // Checksum for verification
    string checksum = 5;
}

// SnapshotMetadata contains snapshot information
message SnapshotMetadata {
    uint64 term = 1;
    uint64 index = 2;
    uint64 conf_state_voters = 3;
    uint64 conf_state_learners = 4;
    string snapshot_id = 5;
}

// SnapshotResponse confirms snapshot delivery
message SnapshotResponse {
    bool success = 1;
    string error = 2;
    uint32 chunks_received = 3;
}

// HeartbeatRequest for connectivity checks
message HeartbeatRequest {
    uint64 node_id = 1;
    int64 timestamp = 2;
    string cluster_id = 3;
}

// HeartbeatResponse for connectivity confirmation
message HeartbeatResponse {
    bool alive = 1;
    uint64 node_id = 2;
    int64 timestamp = 3;
    string status = 4;
}
